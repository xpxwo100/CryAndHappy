package cn.com.aperfect.base.thrift;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-28")
public class ReSult implements org.apache.thrift.TBase<ReSult, ReSult._Fields>, java.io.Serializable, Cloneable, Comparable<ReSult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReSult");

  private static final org.apache.thrift.protocol.TField IS_SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("isSuccess", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField ERROR_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMessage", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("relData", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField BYTE_REL_DATA_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteRelDataList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReSultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReSultTupleSchemeFactory();

  public boolean isSuccess; // required
  public java.lang.String errorMessage; // required
  public java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> relData; // required
  public java.util.List<java.lang.Byte> byteRelDataList; // required
  public java.nio.ByteBuffer value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_SUCCESS((short)1, "isSuccess"),
    ERROR_MESSAGE((short)2, "errorMessage"),
    REL_DATA((short)3, "relData"),
    BYTE_REL_DATA_LIST((short)4, "byteRelDataList"),
    VALUE((short)5, "value");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_SUCCESS
          return IS_SUCCESS;
        case 2: // ERROR_MESSAGE
          return ERROR_MESSAGE;
        case 3: // REL_DATA
          return REL_DATA;
        case 4: // BYTE_REL_DATA_LIST
          return BYTE_REL_DATA_LIST;
        case 5: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISSUCCESS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("isSuccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ERROR_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("errorMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REL_DATA, new org.apache.thrift.meta_data.FieldMetaData("relData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)))));
    tmpMap.put(_Fields.BYTE_REL_DATA_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteRelDataList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReSult.class, metaDataMap);
  }

  public ReSult() {
  }

  public ReSult(
    boolean isSuccess,
    java.lang.String errorMessage,
    java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> relData,
    java.util.List<java.lang.Byte> byteRelDataList,
    java.nio.ByteBuffer value)
  {
    this();
    this.isSuccess = isSuccess;
    setIsSuccessIsSet(true);
    this.errorMessage = errorMessage;
    this.relData = relData;
    this.byteRelDataList = byteRelDataList;
    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReSult(ReSult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isSuccess = other.isSuccess;
    if (other.isSetErrorMessage()) {
      this.errorMessage = other.errorMessage;
    }
    if (other.isSetRelData()) {
      java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> __this__relData = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>(other.relData.size());
      for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Byte>> other_element : other.relData.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.List<java.lang.Byte> other_element_value = other_element.getValue();

        java.lang.String __this__relData_copy_key = other_element_key;

        java.util.List<java.lang.Byte> __this__relData_copy_value = new java.util.ArrayList<java.lang.Byte>(other_element_value);

        __this__relData.put(__this__relData_copy_key, __this__relData_copy_value);
      }
      this.relData = __this__relData;
    }
    if (other.isSetByteRelDataList()) {
      java.util.List<java.lang.Byte> __this__byteRelDataList = new java.util.ArrayList<java.lang.Byte>(other.byteRelDataList);
      this.byteRelDataList = __this__byteRelDataList;
    }
    if (other.isSetValue()) {
      this.value = org.apache.thrift.TBaseHelper.copyBinary(other.value);
    }
  }

  public ReSult deepCopy() {
    return new ReSult(this);
  }

  @Override
  public void clear() {
    setIsSuccessIsSet(false);
    this.isSuccess = false;
    this.errorMessage = null;
    this.relData = null;
    this.byteRelDataList = null;
    this.value = null;
  }

  public boolean isIsSuccess() {
    return this.isSuccess;
  }

  public ReSult setIsSuccess(boolean isSuccess) {
    this.isSuccess = isSuccess;
    setIsSuccessIsSet(true);
    return this;
  }

  public void unsetIsSuccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
  }

  /** Returns true if field isSuccess is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSuccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSUCCESS_ISSET_ID);
  }

  public void setIsSuccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSUCCESS_ISSET_ID, value);
  }

  public java.lang.String getErrorMessage() {
    return this.errorMessage;
  }

  public ReSult setErrorMessage(java.lang.String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  public void unsetErrorMessage() {
    this.errorMessage = null;
  }

  /** Returns true if field errorMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorMessage() {
    return this.errorMessage != null;
  }

  public void setErrorMessageIsSet(boolean value) {
    if (!value) {
      this.errorMessage = null;
    }
  }

  public int getRelDataSize() {
    return (this.relData == null) ? 0 : this.relData.size();
  }

  public void putToRelData(java.lang.String key, java.util.List<java.lang.Byte> val) {
    if (this.relData == null) {
      this.relData = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>();
    }
    this.relData.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> getRelData() {
    return this.relData;
  }

  public ReSult setRelData(java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> relData) {
    this.relData = relData;
    return this;
  }

  public void unsetRelData() {
    this.relData = null;
  }

  /** Returns true if field relData is set (has been assigned a value) and false otherwise */
  public boolean isSetRelData() {
    return this.relData != null;
  }

  public void setRelDataIsSet(boolean value) {
    if (!value) {
      this.relData = null;
    }
  }

  public int getByteRelDataListSize() {
    return (this.byteRelDataList == null) ? 0 : this.byteRelDataList.size();
  }

  public java.util.Iterator<java.lang.Byte> getByteRelDataListIterator() {
    return (this.byteRelDataList == null) ? null : this.byteRelDataList.iterator();
  }

  public void addToByteRelDataList(byte elem) {
    if (this.byteRelDataList == null) {
      this.byteRelDataList = new java.util.ArrayList<java.lang.Byte>();
    }
    this.byteRelDataList.add(elem);
  }

  public java.util.List<java.lang.Byte> getByteRelDataList() {
    return this.byteRelDataList;
  }

  public ReSult setByteRelDataList(java.util.List<java.lang.Byte> byteRelDataList) {
    this.byteRelDataList = byteRelDataList;
    return this;
  }

  public void unsetByteRelDataList() {
    this.byteRelDataList = null;
  }

  /** Returns true if field byteRelDataList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteRelDataList() {
    return this.byteRelDataList != null;
  }

  public void setByteRelDataListIsSet(boolean value) {
    if (!value) {
      this.byteRelDataList = null;
    }
  }

  public byte[] getValue() {
    setValue(org.apache.thrift.TBaseHelper.rightSize(value));
    return value == null ? null : value.array();
  }

  public java.nio.ByteBuffer bufferForValue() {
    return org.apache.thrift.TBaseHelper.copyBinary(value);
  }

  public ReSult setValue(byte[] value) {
    this.value = value == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(value.clone());
    return this;
  }

  public ReSult setValue(java.nio.ByteBuffer value) {
    this.value = org.apache.thrift.TBaseHelper.copyBinary(value);
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case IS_SUCCESS:
      if (value == null) {
        unsetIsSuccess();
      } else {
        setIsSuccess((java.lang.Boolean)value);
      }
      break;

    case ERROR_MESSAGE:
      if (value == null) {
        unsetErrorMessage();
      } else {
        setErrorMessage((java.lang.String)value);
      }
      break;

    case REL_DATA:
      if (value == null) {
        unsetRelData();
      } else {
        setRelData((java.util.Map<java.lang.String,java.util.List<java.lang.Byte>>)value);
      }
      break;

    case BYTE_REL_DATA_LIST:
      if (value == null) {
        unsetByteRelDataList();
      } else {
        setByteRelDataList((java.util.List<java.lang.Byte>)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        if (value instanceof byte[]) {
          setValue((byte[])value);
        } else {
          setValue((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_SUCCESS:
      return isIsSuccess();

    case ERROR_MESSAGE:
      return getErrorMessage();

    case REL_DATA:
      return getRelData();

    case BYTE_REL_DATA_LIST:
      return getByteRelDataList();

    case VALUE:
      return getValue();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IS_SUCCESS:
      return isSetIsSuccess();
    case ERROR_MESSAGE:
      return isSetErrorMessage();
    case REL_DATA:
      return isSetRelData();
    case BYTE_REL_DATA_LIST:
      return isSetByteRelDataList();
    case VALUE:
      return isSetValue();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReSult)
      return this.equals((ReSult)that);
    return false;
  }

  public boolean equals(ReSult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_isSuccess = true;
    boolean that_present_isSuccess = true;
    if (this_present_isSuccess || that_present_isSuccess) {
      if (!(this_present_isSuccess && that_present_isSuccess))
        return false;
      if (this.isSuccess != that.isSuccess)
        return false;
    }

    boolean this_present_errorMessage = true && this.isSetErrorMessage();
    boolean that_present_errorMessage = true && that.isSetErrorMessage();
    if (this_present_errorMessage || that_present_errorMessage) {
      if (!(this_present_errorMessage && that_present_errorMessage))
        return false;
      if (!this.errorMessage.equals(that.errorMessage))
        return false;
    }

    boolean this_present_relData = true && this.isSetRelData();
    boolean that_present_relData = true && that.isSetRelData();
    if (this_present_relData || that_present_relData) {
      if (!(this_present_relData && that_present_relData))
        return false;
      if (!this.relData.equals(that.relData))
        return false;
    }

    boolean this_present_byteRelDataList = true && this.isSetByteRelDataList();
    boolean that_present_byteRelDataList = true && that.isSetByteRelDataList();
    if (this_present_byteRelDataList || that_present_byteRelDataList) {
      if (!(this_present_byteRelDataList && that_present_byteRelDataList))
        return false;
      if (!this.byteRelDataList.equals(that.byteRelDataList))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSuccess) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetErrorMessage()) ? 131071 : 524287);
    if (isSetErrorMessage())
      hashCode = hashCode * 8191 + errorMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetRelData()) ? 131071 : 524287);
    if (isSetRelData())
      hashCode = hashCode * 8191 + relData.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteRelDataList()) ? 131071 : 524287);
    if (isSetByteRelDataList())
      hashCode = hashCode * 8191 + byteRelDataList.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReSult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetIsSuccess()).compareTo(other.isSetIsSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSuccess, other.isSuccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorMessage, other.errorMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRelData()).compareTo(other.isSetRelData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relData, other.relData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetByteRelDataList()).compareTo(other.isSetByteRelDataList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteRelDataList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteRelDataList, other.byteRelDataList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReSult(");
    boolean first = true;

    sb.append("isSuccess:");
    sb.append(this.isSuccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorMessage:");
    if (this.errorMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.errorMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relData:");
    if (this.relData == null) {
      sb.append("null");
    } else {
      sb.append(this.relData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteRelDataList:");
    if (this.byteRelDataList == null) {
      sb.append("null");
    } else {
      sb.append(this.byteRelDataList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    if (this.value == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.value, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReSultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReSultStandardScheme getScheme() {
      return new ReSultStandardScheme();
    }
  }

  private static class ReSultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReSult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReSult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSuccess = iprot.readBool();
              struct.setIsSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ERROR_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorMessage = iprot.readString();
              struct.setErrorMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REL_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.relData = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>(2*_map26.size);
                java.lang.String _key27;
                java.util.List<java.lang.Byte> _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                    _val28 = new java.util.ArrayList<java.lang.Byte>(_list30.size);
                    byte _elem31;
                    for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                    {
                      _elem31 = iprot.readByte();
                      _val28.add(_elem31);
                    }
                    iprot.readListEnd();
                  }
                  struct.relData.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setRelDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTE_REL_DATA_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.byteRelDataList = new java.util.ArrayList<java.lang.Byte>(_list33.size);
                byte _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readByte();
                  struct.byteRelDataList.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setByteRelDataListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readBinary();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReSult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_SUCCESS_FIELD_DESC);
      oprot.writeBool(struct.isSuccess);
      oprot.writeFieldEnd();
      if (struct.errorMessage != null) {
        oprot.writeFieldBegin(ERROR_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.errorMessage);
        oprot.writeFieldEnd();
      }
      if (struct.relData != null) {
        oprot.writeFieldBegin(REL_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.relData.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Byte>> _iter36 : struct.relData.entrySet())
          {
            oprot.writeString(_iter36.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, _iter36.getValue().size()));
              for (byte _iter37 : _iter36.getValue())
              {
                oprot.writeByte(_iter37);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byteRelDataList != null) {
        oprot.writeFieldBegin(BYTE_REL_DATA_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteRelDataList.size()));
          for (byte _iter38 : struct.byteRelDataList)
          {
            oprot.writeByte(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(struct.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReSultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReSultTupleScheme getScheme() {
      return new ReSultTupleScheme();
    }
  }

  private static class ReSultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReSult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReSult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetIsSuccess()) {
        optionals.set(0);
      }
      if (struct.isSetErrorMessage()) {
        optionals.set(1);
      }
      if (struct.isSetRelData()) {
        optionals.set(2);
      }
      if (struct.isSetByteRelDataList()) {
        optionals.set(3);
      }
      if (struct.isSetValue()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIsSuccess()) {
        oprot.writeBool(struct.isSuccess);
      }
      if (struct.isSetErrorMessage()) {
        oprot.writeString(struct.errorMessage);
      }
      if (struct.isSetRelData()) {
        {
          oprot.writeI32(struct.relData.size());
          for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Byte>> _iter39 : struct.relData.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            {
              oprot.writeI32(_iter39.getValue().size());
              for (byte _iter40 : _iter39.getValue())
              {
                oprot.writeByte(_iter40);
              }
            }
          }
        }
      }
      if (struct.isSetByteRelDataList()) {
        {
          oprot.writeI32(struct.byteRelDataList.size());
          for (byte _iter41 : struct.byteRelDataList)
          {
            oprot.writeByte(_iter41);
          }
        }
      }
      if (struct.isSetValue()) {
        oprot.writeBinary(struct.value);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReSult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.isSuccess = iprot.readBool();
        struct.setIsSuccessIsSet(true);
      }
      if (incoming.get(1)) {
        struct.errorMessage = iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map42 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.relData = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>(2*_map42.size);
          java.lang.String _key43;
          java.util.List<java.lang.Byte> _val44;
          for (int _i45 = 0; _i45 < _map42.size; ++_i45)
          {
            _key43 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list46 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _val44 = new java.util.ArrayList<java.lang.Byte>(_list46.size);
              byte _elem47;
              for (int _i48 = 0; _i48 < _list46.size; ++_i48)
              {
                _elem47 = iprot.readByte();
                _val44.add(_elem47);
              }
            }
            struct.relData.put(_key43, _val44);
          }
        }
        struct.setRelDataIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteRelDataList = new java.util.ArrayList<java.lang.Byte>(_list49.size);
          byte _elem50;
          for (int _i51 = 0; _i51 < _list49.size; ++_i51)
          {
            _elem50 = iprot.readByte();
            struct.byteRelDataList.add(_elem50);
          }
        }
        struct.setByteRelDataListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.value = iprot.readBinary();
        struct.setValueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

