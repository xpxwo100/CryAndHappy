package cn.com.aperfect.base.thrift;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-05-28")
public class DataWrapper implements org.apache.thrift.TBase<DataWrapper, DataWrapper._Fields>, java.io.Serializable, Cloneable, Comparable<DataWrapper> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataWrapper");

  private static final org.apache.thrift.protocol.TField BEAN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("beanName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METHOD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("methodName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("paramsMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField BYTE_PARAMS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("byteParamsList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DataWrapperStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DataWrapperTupleSchemeFactory();

  public java.lang.String beanName; // required
  public java.lang.String methodName; // required
  public java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> paramsMap; // required
  public java.util.List<java.lang.Byte> byteParamsList; // required
  public java.nio.ByteBuffer params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BEAN_NAME((short)1, "beanName"),
    METHOD_NAME((short)2, "methodName"),
    PARAMS_MAP((short)3, "paramsMap"),
    BYTE_PARAMS_LIST((short)4, "byteParamsList"),
    PARAMS((short)5, "params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BEAN_NAME
          return BEAN_NAME;
        case 2: // METHOD_NAME
          return METHOD_NAME;
        case 3: // PARAMS_MAP
          return PARAMS_MAP;
        case 4: // BYTE_PARAMS_LIST
          return BYTE_PARAMS_LIST;
        case 5: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BEAN_NAME, new org.apache.thrift.meta_data.FieldMetaData("beanName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD_NAME, new org.apache.thrift.meta_data.FieldMetaData("methodName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMS_MAP, new org.apache.thrift.meta_data.FieldMetaData("paramsMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)))));
    tmpMap.put(_Fields.BYTE_PARAMS_LIST, new org.apache.thrift.meta_data.FieldMetaData("byteParamsList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataWrapper.class, metaDataMap);
  }

  public DataWrapper() {
  }

  public DataWrapper(
    java.lang.String beanName,
    java.lang.String methodName,
    java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> paramsMap,
    java.util.List<java.lang.Byte> byteParamsList,
    java.nio.ByteBuffer params)
  {
    this();
    this.beanName = beanName;
    this.methodName = methodName;
    this.paramsMap = paramsMap;
    this.byteParamsList = byteParamsList;
    this.params = org.apache.thrift.TBaseHelper.copyBinary(params);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DataWrapper(DataWrapper other) {
    if (other.isSetBeanName()) {
      this.beanName = other.beanName;
    }
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    if (other.isSetParamsMap()) {
      java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> __this__paramsMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>(other.paramsMap.size());
      for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Byte>> other_element : other.paramsMap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.List<java.lang.Byte> other_element_value = other_element.getValue();

        java.lang.String __this__paramsMap_copy_key = other_element_key;

        java.util.List<java.lang.Byte> __this__paramsMap_copy_value = new java.util.ArrayList<java.lang.Byte>(other_element_value);

        __this__paramsMap.put(__this__paramsMap_copy_key, __this__paramsMap_copy_value);
      }
      this.paramsMap = __this__paramsMap;
    }
    if (other.isSetByteParamsList()) {
      java.util.List<java.lang.Byte> __this__byteParamsList = new java.util.ArrayList<java.lang.Byte>(other.byteParamsList);
      this.byteParamsList = __this__byteParamsList;
    }
    if (other.isSetParams()) {
      this.params = org.apache.thrift.TBaseHelper.copyBinary(other.params);
    }
  }

  public DataWrapper deepCopy() {
    return new DataWrapper(this);
  }

  @Override
  public void clear() {
    this.beanName = null;
    this.methodName = null;
    this.paramsMap = null;
    this.byteParamsList = null;
    this.params = null;
  }

  public java.lang.String getBeanName() {
    return this.beanName;
  }

  public DataWrapper setBeanName(java.lang.String beanName) {
    this.beanName = beanName;
    return this;
  }

  public void unsetBeanName() {
    this.beanName = null;
  }

  /** Returns true if field beanName is set (has been assigned a value) and false otherwise */
  public boolean isSetBeanName() {
    return this.beanName != null;
  }

  public void setBeanNameIsSet(boolean value) {
    if (!value) {
      this.beanName = null;
    }
  }

  public java.lang.String getMethodName() {
    return this.methodName;
  }

  public DataWrapper setMethodName(java.lang.String methodName) {
    this.methodName = methodName;
    return this;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  /** Returns true if field methodName is set (has been assigned a value) and false otherwise */
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public int getParamsMapSize() {
    return (this.paramsMap == null) ? 0 : this.paramsMap.size();
  }

  public void putToParamsMap(java.lang.String key, java.util.List<java.lang.Byte> val) {
    if (this.paramsMap == null) {
      this.paramsMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>();
    }
    this.paramsMap.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> getParamsMap() {
    return this.paramsMap;
  }

  public DataWrapper setParamsMap(java.util.Map<java.lang.String,java.util.List<java.lang.Byte>> paramsMap) {
    this.paramsMap = paramsMap;
    return this;
  }

  public void unsetParamsMap() {
    this.paramsMap = null;
  }

  /** Returns true if field paramsMap is set (has been assigned a value) and false otherwise */
  public boolean isSetParamsMap() {
    return this.paramsMap != null;
  }

  public void setParamsMapIsSet(boolean value) {
    if (!value) {
      this.paramsMap = null;
    }
  }

  public int getByteParamsListSize() {
    return (this.byteParamsList == null) ? 0 : this.byteParamsList.size();
  }

  public java.util.Iterator<java.lang.Byte> getByteParamsListIterator() {
    return (this.byteParamsList == null) ? null : this.byteParamsList.iterator();
  }

  public void addToByteParamsList(byte elem) {
    if (this.byteParamsList == null) {
      this.byteParamsList = new java.util.ArrayList<java.lang.Byte>();
    }
    this.byteParamsList.add(elem);
  }

  public java.util.List<java.lang.Byte> getByteParamsList() {
    return this.byteParamsList;
  }

  public DataWrapper setByteParamsList(java.util.List<java.lang.Byte> byteParamsList) {
    this.byteParamsList = byteParamsList;
    return this;
  }

  public void unsetByteParamsList() {
    this.byteParamsList = null;
  }

  /** Returns true if field byteParamsList is set (has been assigned a value) and false otherwise */
  public boolean isSetByteParamsList() {
    return this.byteParamsList != null;
  }

  public void setByteParamsListIsSet(boolean value) {
    if (!value) {
      this.byteParamsList = null;
    }
  }

  public byte[] getParams() {
    setParams(org.apache.thrift.TBaseHelper.rightSize(params));
    return params == null ? null : params.array();
  }

  public java.nio.ByteBuffer bufferForParams() {
    return org.apache.thrift.TBaseHelper.copyBinary(params);
  }

  public DataWrapper setParams(byte[] params) {
    this.params = params == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(params.clone());
    return this;
  }

  public DataWrapper setParams(java.nio.ByteBuffer params) {
    this.params = org.apache.thrift.TBaseHelper.copyBinary(params);
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BEAN_NAME:
      if (value == null) {
        unsetBeanName();
      } else {
        setBeanName((java.lang.String)value);
      }
      break;

    case METHOD_NAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((java.lang.String)value);
      }
      break;

    case PARAMS_MAP:
      if (value == null) {
        unsetParamsMap();
      } else {
        setParamsMap((java.util.Map<java.lang.String,java.util.List<java.lang.Byte>>)value);
      }
      break;

    case BYTE_PARAMS_LIST:
      if (value == null) {
        unsetByteParamsList();
      } else {
        setByteParamsList((java.util.List<java.lang.Byte>)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        if (value instanceof byte[]) {
          setParams((byte[])value);
        } else {
          setParams((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BEAN_NAME:
      return getBeanName();

    case METHOD_NAME:
      return getMethodName();

    case PARAMS_MAP:
      return getParamsMap();

    case BYTE_PARAMS_LIST:
      return getByteParamsList();

    case PARAMS:
      return getParams();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BEAN_NAME:
      return isSetBeanName();
    case METHOD_NAME:
      return isSetMethodName();
    case PARAMS_MAP:
      return isSetParamsMap();
    case BYTE_PARAMS_LIST:
      return isSetByteParamsList();
    case PARAMS:
      return isSetParams();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DataWrapper)
      return this.equals((DataWrapper)that);
    return false;
  }

  public boolean equals(DataWrapper that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_beanName = true && this.isSetBeanName();
    boolean that_present_beanName = true && that.isSetBeanName();
    if (this_present_beanName || that_present_beanName) {
      if (!(this_present_beanName && that_present_beanName))
        return false;
      if (!this.beanName.equals(that.beanName))
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_paramsMap = true && this.isSetParamsMap();
    boolean that_present_paramsMap = true && that.isSetParamsMap();
    if (this_present_paramsMap || that_present_paramsMap) {
      if (!(this_present_paramsMap && that_present_paramsMap))
        return false;
      if (!this.paramsMap.equals(that.paramsMap))
        return false;
    }

    boolean this_present_byteParamsList = true && this.isSetByteParamsList();
    boolean that_present_byteParamsList = true && that.isSetByteParamsList();
    if (this_present_byteParamsList || that_present_byteParamsList) {
      if (!(this_present_byteParamsList && that_present_byteParamsList))
        return false;
      if (!this.byteParamsList.equals(that.byteParamsList))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBeanName()) ? 131071 : 524287);
    if (isSetBeanName())
      hashCode = hashCode * 8191 + beanName.hashCode();

    hashCode = hashCode * 8191 + ((isSetMethodName()) ? 131071 : 524287);
    if (isSetMethodName())
      hashCode = hashCode * 8191 + methodName.hashCode();

    hashCode = hashCode * 8191 + ((isSetParamsMap()) ? 131071 : 524287);
    if (isSetParamsMap())
      hashCode = hashCode * 8191 + paramsMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetByteParamsList()) ? 131071 : 524287);
    if (isSetByteParamsList())
      hashCode = hashCode * 8191 + byteParamsList.hashCode();

    hashCode = hashCode * 8191 + ((isSetParams()) ? 131071 : 524287);
    if (isSetParams())
      hashCode = hashCode * 8191 + params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DataWrapper other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBeanName()).compareTo(other.isSetBeanName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeanName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beanName, other.beanName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMethodName()).compareTo(other.isSetMethodName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethodName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.methodName, other.methodName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParamsMap()).compareTo(other.isSetParamsMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParamsMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramsMap, other.paramsMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetByteParamsList()).compareTo(other.isSetByteParamsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteParamsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteParamsList, other.byteParamsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DataWrapper(");
    boolean first = true;

    sb.append("beanName:");
    if (this.beanName == null) {
      sb.append("null");
    } else {
      sb.append(this.beanName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paramsMap:");
    if (this.paramsMap == null) {
      sb.append("null");
    } else {
      sb.append(this.paramsMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("byteParamsList:");
    if (this.byteParamsList == null) {
      sb.append("null");
    } else {
      sb.append(this.byteParamsList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.params, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataWrapperStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataWrapperStandardScheme getScheme() {
      return new DataWrapperStandardScheme();
    }
  }

  private static class DataWrapperStandardScheme extends org.apache.thrift.scheme.StandardScheme<DataWrapper> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DataWrapper struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BEAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beanName = iprot.readString();
              struct.setBeanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METHOD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.methodName = iprot.readString();
              struct.setMethodNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.paramsMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>(2*_map0.size);
                java.lang.String _key1;
                java.util.List<java.lang.Byte> _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                    _val2 = new java.util.ArrayList<java.lang.Byte>(_list4.size);
                    byte _elem5;
                    for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                    {
                      _elem5 = iprot.readByte();
                      _val2.add(_elem5);
                    }
                    iprot.readListEnd();
                  }
                  struct.paramsMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setParamsMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BYTE_PARAMS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list7 = iprot.readListBegin();
                struct.byteParamsList = new java.util.ArrayList<java.lang.Byte>(_list7.size);
                byte _elem8;
                for (int _i9 = 0; _i9 < _list7.size; ++_i9)
                {
                  _elem8 = iprot.readByte();
                  struct.byteParamsList.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setByteParamsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.params = iprot.readBinary();
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DataWrapper struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.beanName != null) {
        oprot.writeFieldBegin(BEAN_NAME_FIELD_DESC);
        oprot.writeString(struct.beanName);
        oprot.writeFieldEnd();
      }
      if (struct.methodName != null) {
        oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
        oprot.writeString(struct.methodName);
        oprot.writeFieldEnd();
      }
      if (struct.paramsMap != null) {
        oprot.writeFieldBegin(PARAMS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.paramsMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Byte>> _iter10 : struct.paramsMap.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, _iter10.getValue().size()));
              for (byte _iter11 : _iter10.getValue())
              {
                oprot.writeByte(_iter11);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.byteParamsList != null) {
        oprot.writeFieldBegin(BYTE_PARAMS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.byteParamsList.size()));
          for (byte _iter12 : struct.byteParamsList)
          {
            oprot.writeByte(_iter12);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        oprot.writeBinary(struct.params);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataWrapperTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DataWrapperTupleScheme getScheme() {
      return new DataWrapperTupleScheme();
    }
  }

  private static class DataWrapperTupleScheme extends org.apache.thrift.scheme.TupleScheme<DataWrapper> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DataWrapper struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBeanName()) {
        optionals.set(0);
      }
      if (struct.isSetMethodName()) {
        optionals.set(1);
      }
      if (struct.isSetParamsMap()) {
        optionals.set(2);
      }
      if (struct.isSetByteParamsList()) {
        optionals.set(3);
      }
      if (struct.isSetParams()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetBeanName()) {
        oprot.writeString(struct.beanName);
      }
      if (struct.isSetMethodName()) {
        oprot.writeString(struct.methodName);
      }
      if (struct.isSetParamsMap()) {
        {
          oprot.writeI32(struct.paramsMap.size());
          for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.Byte>> _iter13 : struct.paramsMap.entrySet())
          {
            oprot.writeString(_iter13.getKey());
            {
              oprot.writeI32(_iter13.getValue().size());
              for (byte _iter14 : _iter13.getValue())
              {
                oprot.writeByte(_iter14);
              }
            }
          }
        }
      }
      if (struct.isSetByteParamsList()) {
        {
          oprot.writeI32(struct.byteParamsList.size());
          for (byte _iter15 : struct.byteParamsList)
          {
            oprot.writeByte(_iter15);
          }
        }
      }
      if (struct.isSetParams()) {
        oprot.writeBinary(struct.params);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DataWrapper struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.beanName = iprot.readString();
        struct.setBeanNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.methodName = iprot.readString();
        struct.setMethodNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.paramsMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.Byte>>(2*_map16.size);
          java.lang.String _key17;
          java.util.List<java.lang.Byte> _val18;
          for (int _i19 = 0; _i19 < _map16.size; ++_i19)
          {
            _key17 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
              _val18 = new java.util.ArrayList<java.lang.Byte>(_list20.size);
              byte _elem21;
              for (int _i22 = 0; _i22 < _list20.size; ++_i22)
              {
                _elem21 = iprot.readByte();
                _val18.add(_elem21);
              }
            }
            struct.paramsMap.put(_key17, _val18);
          }
        }
        struct.setParamsMapIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
          struct.byteParamsList = new java.util.ArrayList<java.lang.Byte>(_list23.size);
          byte _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readByte();
            struct.byteParamsList.add(_elem24);
          }
        }
        struct.setByteParamsListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.params = iprot.readBinary();
        struct.setParamsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

